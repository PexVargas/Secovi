<style>
    .highcharts-figure, .highcharts-data-table table {
        min-width: 310px;
        max-width: 800px;
        margin: 1em auto;
    }

    #container {
        height: 400px;
    }

    .highcharts-data-table table {
        font-family: Verdana, sans-serif;
        border-collapse: collapse;
        border: 1px solid #EBEBEB;
        margin: 10px auto;
        text-align: center;
        width: 100%;
        max-width: 500px;
    }

    .highcharts-data-table caption {
        padding: 1em 0;
        font-size: 1.2em;
        color: #555;
    }

    .highcharts-data-table th {
        font-weight: 600;
        padding: 0.5em;
    }

    .highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {
        padding: 0.5em;
    }

    .highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {
        background: #f8f8f8;
    }

    .highcharts-data-table tr:hover {
        background: #f1f7ff;
    }
    /*CSS FILTRO*/
    .boxFiltro {
        position: absolute;
        width: 50px;
        height: 50px;
        background-color: lightgray;
        right: 0px;
        top: 40%;
        border-bottom-left-radius: 5px;
        border-top-left-radius: 5px;
        padding: 13px;
        color: #345675;
        z-index: 9;
        cursor: pointer;
    }

    .funcFiltroLista {
        position: absolute;
        width: 355px;
        z-index: 9;
        top: 27%;
        right: 45px;
        background-color: white;
        border-radius: 10px;
        border: 5px solid lightgray;
    }

    .fundoFiltroLista {
        position: fixed;
        width: 100%;
        height: 100%;
        z-index: 8;
    }

    .dropdown-menu.show {
        height: 200px;
    }

    h3.card-body {
        text-align: center;
    }

    .ab {
        padding: .9375rem 20px;
        position: relative;
        padding: 26px;
        height: 160px;
    }

    p.card-body {
        text-align: end;
        margin: -18px;
    }

    .cd {
        height: 160px;
        ;
    }

    .container-vermelho {
        border: 1px solid red;
    }

    input#dtReferencia {
        font-weight: bold;
    }
    span.numSemNum {
        font-size: 14px;
    }
    .qtdVermelho{
        color:red;
    }
    .qtdAzul{
        color:blue;
    }
    /*FIM CSS FILTRO*/
</style>
<div class="boxFiltro">
    <i class="material-icons">
        filter_alt
    </i>
</div>
<div class="fundoFiltroLista"></div>
<div class="funcFiltroLista">
    <div class="col-md-12">

        <div class="form-group col-md-12">
            <span class="toggle"></span>Referência
            <input type="text" class="form-control datetimepicker" value="05/2021" id="dtReferencia" name="dtReferencia" title="Selecione a referência" />
        </div>

        <div class="form-group col-md-12">
            <select multiple id="cmbCidade" class="form-control selectpicker" data-style="btn btn-link" title="Selecione a Cidade">
                @foreach (var itens in Model.Cidades)
                {
                    <option value="@itens">@itens</option>
                }

            </select>
        </div>
        <div class="form-group col-md-12">
            <select multiple id="cmbBairro" class="form-control selectpicker" data-style="btn btn-link" title="Selecione o Bairro">
                @foreach (var itens in Model.Bairros)
                {
                    <option value="@itens">@itens</option>
                }
            </select>
        </div>
        <div class="form-group col-md-12">
            <select multiple id="cmbTipo" class="form-control selectpicker" data-style="btn btn-link" title="Selecione o Tipo">
                @foreach (var itens in Model.Tipos)
                {
                    <option value="@itens">@itens</option>
                }
            </select>
        </div>

        <div class="form-group col-md-12">
            <div class="togglebutton radio">
                <label>
                    <span style="font-weight:bold"></span>Privativa
                    <input type="checkbox" id="cmbTipoArea">
                    <span class="toggle"></span>Total
                </label>
            </div>
        </div>
        <div class="col-md-6" style="float:left;">
            <button type="button" class="btn btn-default" onclick="limpaFiltro()">Limpar</button>
        </div>
        <div class="col-md-6" style="float:left;">
            <button type="button" class="btn btn-primary" onclick="preencheFiltro()">Pesquisar</button>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header card-header-info  card-header-icon">
                <div class="card-icon">
                    <i class="material-icons">
                        trending_up
                    </i>

                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-9">
                        <h3 class="card-title" id="tituloUnidade">Quantidade de ofertas</h3>
                    </div>
                    <div class="col-md-3">
                        <div class="togglebutton radio">
                            <label>
                                <span style="font-weight:bold"></span>Venda
                                <input type="checkbox" id="cmbTipoImovel">
                                <span class="toggle"></span>Locação
                            </label>
                        </div>
                    </div>
                </div>
                <div class="modal-loading-local"></div>
                <div class="row" id="graficoEvolutivo">

                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header card-header-icon card-header-info">
                <div class="card-icon">
                    <i class="material-icons">room</i>
                </div>
                <h3 class="card-title" id="tituloCalculo">Quantidade de ofertas</h3>
            </div>
            <div class="card-body ab">
                <div class="row">
                    <div class="col-md-12">
                        <h3 class="card-body numQtdOfe">Sem registros, por favor modifique a busca!</h3>
                    </div>
                    <div class="col-md-12">
                        <p class="card-body minmaxcv ">min: R$ <span class="valormin"></span>.00</p>
                    </div>
                    <div class="col-md-12">
                        <p class="card-body minmaxcv ">máx: R$ <span class="valormax"></span>.00</p>
                    </div>
                    <div class="col-md-12">
                        <p class="card-body minmaxcv valorcv">cv:</p>
                    </div>
                    <br />
                </div>



            </div>
            <div class="card-footer">
                <div class="stats">
                    <i class="material-icons">local_offer</i>
                    <p> Baseado em <span class="quadroOfertas"> 0 </span> ofertas</p>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header card-header-icon card-header-info">
                <div class="card-icon">
                    <i class="material-icons">south_east</i>
                </div>
                <h3 class="card-title">Metragem média dos Imóveis</h3>

            </div>
            <div class="card-body cd">

                <div class="row">
                    <div class="col-md-12">
                        <h3 class="card-body numMetMed">Sem registros, por favor modifique a busca!</h3>
                    </div>
                    @*<div class="col-md-12">
                        <p class="card-body">min:</p>
                    </div>
                    <div class="col-md-12">
                        <p class="card-body">max:</p>
                    </div>*@



                </div>

            </div>
            <div class="card-footer">
                <div class="stats">
                    <i class="material-icons">local_offer</i>
                 
                    <p> Baseado em <span class="quadroOfertas"> 0 </span> ofertas</p>
                </div>
            </div>
        </div>
    </div>
</div>



<div class="row" id="boxGraficos">

    <div class="col-md-6">
        <div class="card">
            <div class="card-header card-header-icon card-header-info">
                <div class="card-icon">
                    <i class="material-icons">room</i>
                </div>
            </div>
            <div class="card-body">
                <figure class="highcharts-figure">
                    <div class="modal-loading-local"></div>
                    <div id="graficoCidades"></div>
                </figure>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header card-header-icon card-header-info">
                <div class="card-icon">
                    <i class="material-icons">south_east</i>
                </div>

            </div>
            <div class="card-body">
                <figure class="highcharts-figure">
                    <div class="modal-loading-local"></div>
                    <div id="graficoBairros"></div>
                </figure>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header card-header-icon card-header-info">
                <div class="card-icon">
                    <i class="material-icons">language</i>
                </div>
            </div>
            <div class="card-body" id="boxTipos">
                <figure class="highcharts-figure">
                    <div class="modal-loading-local"></div>
                    <div id="graficoTipos"></div>
                </figure>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header card-header-icon card-header-info">
                <div class="card-icon">
                    <i class="material-icons">garage</i>
                </div>
            </div>
            <div class="card-body">
                <figure class="highcharts-figure">
                    <div class="modal-loading-local"></div>
                    <div id="graficoGaragens"></div>
                </figure>
            </div>
        </div>
    </div>


</div>




<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/data.js"></script>
<script src="https://code.highcharts.com/modules/drilldown.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>

<script>
    
    $(document).ready(function () {
        Pesquisar();

        $('.datetimepicker').datetimepicker({
            viewMode: 'months',
            format: 'MM/YYYY',
            icons: {
                time: "fa fa-clock-o",
                date: "fa fa-calendar",
                up: "fa fa-chevron-up",
                down: "fa fa-chevron-down",
                previous: 'fa fa-chevron-left',
                next: 'fa fa-chevron-right',
                today: 'fa fa-screenshot',
                clear: 'fa fa-trash',
                close: 'fa fa-remove'
            },
            locale: 'pt-br'
        });
        $('.datetimepicker').on('dp.hide', function (e) {
            $('.datetimepicker').datetimepicker('destroy');
            ativaNovamenteDate();
        });
        $('#cmbCidade').on('change', function () {
            document.querySelector("[data-id='cmbCidade']").classList.remove('container-vermelho');
        });
        $('.togglebutton').on('click', function () {
            preencheFiltro();
        });
        verificaPag()
    });
    function verificaPag() {
        var vemParametro = getUrlParameter('pag');
        console.log(vemParametro);
        if (vemParametro == 'qtd') {
            $('.menu-qo .nav-link').click();
        }
        if (vemParametro == 'vm') {
            console.log('entrei');
            $('.menu-vm .nav-link').click();
        }
        if (vemParametro == 'vm2') {
            $('.menu-vm2 .nav-link').click();
        }
    }
        function getUrlParameter(sParam) {
            var sPageURL = window.location.search.substring(1),
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;

            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');

                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
                }
            }
        };
    
    function recarregaPagina() {
        Pesquisar();
    }
    function ativaNovamenteDate() {

        $('.datetimepicker').datetimepicker({
            viewMode: 'months',
            format: 'MM/YYYY',
            icons: {
                date: "fa fa-calendar",
                up: "fa fa-chevron-up",
                down: "fa fa-chevron-down",
                previous: 'fa fa-chevron-left',
                next: 'fa fa-chevron-right',
                today: 'fa fa-screenshot',
                clear: 'fa fa-trash',
                close: 'fa fa-remove',

            },
            locale: 'pt-br'
        });
    }
    var cidades = [];
    var bairros = [];
    var tipos = [];
    var tipoimovel = 1;
    var dtRefencia = "";
    var unidade;
    var tipoArea = 2;
    var possuiCidades = false;

    $('.boxFiltro').on('click', function () {
        $('.fundoFiltroLista').show();
        $('.funcFiltroLista').toggle();
    });
    $('.fundoFiltroLista').on('click', function () {
        $('.fundoFiltroLista').hide();
        $('.funcFiltroLista').hide();
    });

    $('#cmbCidade').on('change', function () {
        cidades = $('#cmbCidade').val();
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "/Home/Bairros",
            data: JSON.stringify({ cidades }),

            dataType: "json",
            success: function (result) {
                console.log(result);
            }
        });
    });

    function limpaFiltro() {

        cidades = [];
        bairros = [];
        tipos = [];

        $('#cmbCidade').val('');
        $('#cmbCidade').selectpicker("refresh");
        $('#cmbBairro').val('');
        $('#cmbBairro').selectpicker("refresh");
        $('#cmbTipo').val('');
        $('#cmbTipo').selectpicker("refresh");

        Pesquisar();
    }

    function preencheFiltro() {
        var data = $('#dtReferencia').val();
        var cidade = $('#cmbCidade').val();
        if (data == "" || cidade == "") {
            if (data == "") {
                document.querySelector("[data-id='dtReferencia']").classList.add('container-vermelho');
            }
            if (cidade == "") {
                document.querySelector("[data-id='cmbCidade']").classList.add('container-vermelho');
            }
        } else {

            $('.fundoFiltroLista').hide();
            $('.funcFiltroLista').hide();

            cidades = $('#cmbCidade').val();
            bairros = $('#cmbBairro').val();
            tipos = $('#cmbTipo').val();

            Pesquisar();
        }

    }


    function Pesquisar(pagina) {
        if ($("#cmbTipoImovel").is(':checked'))
            tipoimovel = 2;
        else
            tipoimovel = 1;

        if ($("#cmbTipoArea").is(':checked'))
            tipoArea = 1;
        else
            tipoArea = 2;

        cidades = $('#cmbCidade').val();
        bairros = $('#cmbBairro').val();
        tipos = $('#cmbTipo').val();
        dtRefencia = $('#dtReferencia').val();

        switch (document.querySelector("#tituloUnidade").innerHTML) {
            case "Valor médio":
                unidade = "valorMedio"
                break;
            case "Valor médio m²":
                unidade = "valorMedioMetros"
                break;
            default:
                unidade = "quantidade"
        }



        CarregarGraficoMeses();
        CarregarGraficoTipos();
        CarregarGraficoCidades();
        CarregarGraficoBairros();
        CarregarGraficoGaragens();

        if (unidade == "quantidade") {
            $('.minmaxcv').hide();
        }
        else
        {
            $('.minmaxcv').show();
        }
    }


    function CarregarGraficoMeses() {
        var pagAtual = $('#tituloCalculo').html();
        $('.modal-loading-local').show();
        $('#graficoEvolutivo').hide();
        var processed_json = new Array();
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "/Home/GetEvolutivo",
            //data: JSON.stringify({ cidades: cidades, Bairros: bairros, Tipos: tipos, TipoImovel: tipoimovel, DtReferencia: dtRefencia }),
            data: JSON.stringify({ cidades, bairros, tipos, tipoimovel, DtReferencia: dtRefencia, Unidade: unidade, TipoArea: tipoArea }),
            dataType: "json",
            success: function (result) {
                debugger;
                //quantidadeOfertas
            

                $('.modal-loading-local').hide();
                $('#graficoEvolutivo').show();
                if (result.length == 0) {
                    if (possuiCidades == false) {
                        $('.numMetMed').html('<span class="numSemNum">Sem registros, por favor modifique a busca!</span>');
                        $('.numQtdOfe').html('<span class="numSemNum">Sem registros, por favor modifique a busca!</span>');
                    }
                    $('#graficoEvolutivo').html('Sem registros, por favor modifique a busca!');
                } else {
                    $('.quadroOfertas').html(result[result.length - 1].quantidadeOfertas.toString());
                    

                    if (possuiCidades == true) {
                      
                        if (unidade != "quantidade") {
                            var todos = result[result.length - 1];
                            $('.numMetMed').html('' + todos.metragemMedia.toLocaleString('pt-BR'));
                            $('.numQtdOfe').html('R$' + todos.value.toLocaleString('pt-BR'));
                            if (result[result.length - 1].maximo != null)
                                $('.valormax').html(result[result.length - 1].maximo.toLocaleString('pt-BR'));
                            if (result[result.length - 1].minimo != null)
                                $('.valormin').html(result[result.length - 1].minimo.toLocaleString('pt-BR'));
                            $('.numQtdOfe').removeClass('qtdVermelho');
                            $('.numQtdOfe').removeClass('qtdAzul');
                            if (todos.value < 10) {
                                $('.numQtdOfe').removeClass('qtdAzul');
                                $('.numQtdOfe').addClass('qtdVermelho');
                            } else {
                                $('.numQtdOfe').removeClass('qtdVermelho');
                                $('.numQtdOfe').addClass('qtdAzul');
                            }
                        } else {
                            var todos = result[result.length - 1];
                            $('.numMetMed').html(todos.metragemMedia.toFixed(2));
                            $('.numQtdOfe').html(todos.value.toLocaleString('pt-BR'));
                            if (todos.value < 10) {
                                $('.numQtdOfe').removeClass('qtdAzul');
                                $('.numQtdOfe').addClass('qtdVermelho');
                            } else {
                                $('.numQtdOfe').removeClass('qtdVermelho');
                                $('.numQtdOfe').addClass('qtdAzul');
                            }
                        }
                        
                    }
                    
                    var processed_json = [];
                    
                    for (i = 0; i < result.length; i++) {
                        //if (pagAtual == 'Quantidade de ofertas')
                            processed_json.push([result[i].key, result[i].key, result[i].value]);
                        //else
                        //    processed_json.push([result[i].key, result[i].key + " - R$" + result[i].value.toLocaleString('pt-BR'), result[i].value]);
                    }

                    var dadosPivot = getPivotArray(processed_json, 0, 1, 2);

                    var categories = dadosPivot;
                    categories[0].shift();

                    var dadosGrafico = [];

                    for (i = 1; i < dadosPivot.length; i++) {

                        dadosGrafico.push({
                            name: dadosPivot[i].shift(),
                            data: dadosPivot[i],
                        });
                    }

                    CarregarGraficoEvolutivo("graficoEvolutivo", categories[0], dadosGrafico, "Série histórica", "column", "12");
                }


            },
            error: function (err) {
            }
        });

    }

    function CarregarGraficoCidades() {
        var pagAtual = $('#tituloCalculo').html();
        $('.modal-loading-local').show();
        $('#graficoCidades').hide();
        var processed_json = new Array();
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "/Home/GetCidades",
            data: JSON.stringify({ cidades, bairros, tipos, tipoimovel, DtReferencia: dtRefencia, Unidade: unidade, TipoArea: tipoArea }),
            dataType: "json",
            success: function (result) {
                $('.modal-loading-local').hide();
                $('#graficoCidades').show();
                if (result.length == 0) {
                    possuiCidades = false;
                    
                    $('#graficoCidades').html('Sem registros, por favor modifique a busca!');
                } else {
                    possuiCidades = true;
                    var processed_json = [];

                    var value = 0;
                    for (i = 0; i < result.length; i++) {
                        var key = result[i].key;

                        if (i >= 15) {
                            //var key = "OUTRAS";
                            //value += result[i].value;
                            //processed_json.push([key, key, value]);
                        }
                        else
                            //if (pagAtual == 'Quantidade de ofertas')
                                processed_json.push([result[i].key, result[i].key, result[i].value]);
                            //else
                            //    processed_json.push([result[i].key, result[i].key + " - R$" + result[i].value.toLocaleString('pt-BR'), result[i].value]);
                    }

                    var dadosPivot = getPivotArray(processed_json, 0, 1, 2);

                    var categories = dadosPivot;
                    categories[0].shift();

                    var dadosGrafico = [];

                    
                        for (i = 1; i < dadosPivot.length; i++) {

                            dadosGrafico.push({
                                name: dadosPivot[i].shift() ,
                                data: dadosPivot[i]
                            });
                        }
                    
                    
                    CarregarGrafico("graficoCidades", categories[0], dadosGrafico, "Oferta por cidades", "bar", "6");
                }
            },
            error: function (err) {
            }
        });
    }

    function CarregarGraficoBairros() {
        var pagAtual = $('#tituloCalculo').html();
        $('.modal-loading-local').show();
        $('#graficoBairros').hide();
        var processed_json = new Array();

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "/Home/GetBairros",
            data: JSON.stringify({ cidades, bairros, tipos, tipoimovel, DtReferencia: dtRefencia, Unidade: unidade, TipoArea: tipoArea }),

            dataType: "json",
            success: function (result) {
                $('.modal-loading-local').hide();
                $('#graficoBairros').show();

                if (result.length == 0) {
                    $('#graficoBairros').html('Sem registros, por favor modifique a busca!');
                } else {
                    var processed_json = [];

                    var value = 0;
                    for (i = 0; i < result.length; i++) {
                        var key = result[i].key;

                        if (i >= 15) {
                            //var key = "OUTROS";
                            //value += result[i].value;
                            //processed_json.push([key, key, value]);
                        }
                        else
                            /*if (pagAtual == 'Quantidade de ofertas')*/
                                processed_json.push([result[i].key, result[i].key, result[i].value]);
                            //else
                            //    processed_json.push([result[i].key, result[i].key + " - R$" + result[i].value.toLocaleString('pt-BR'), result[i].value]);
                    }

                    var dadosPivot = getPivotArray(processed_json, 0, 1, 2);

                    var categories = dadosPivot;
                    categories[0].shift();

                    var dadosGrafico = [];

                    for (i = 1; i < dadosPivot.length; i++) {

                        dadosGrafico.push({
                            name: dadosPivot[i].shift(),
                            data: dadosPivot[i]
                        });
                    }

                    CarregarGrafico("graficoBairros", categories[0], dadosGrafico, "Oferta por bairros", "bar", "6");
                }
            },
            error: function (err) {
            }
        });
    }

    function CarregarGraficoTipos() {
        var pagAtual = $('#tituloCalculo').html();
        $('.modal-loading-local').show();
        $('#graficoTipos').hide();
        var processed_json = new Array();

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "/Home/GetTipos",
            data: JSON.stringify({ cidades, bairros, tipos, tipoimovel, DtReferencia: dtRefencia, Unidade: unidade, TipoArea: tipoArea }),

            dataType: "json",
            success: function (result) {
                $('.modal-loading-local').hide();
                $('#graficoTipos').show();

                if (result.length == 0) {
                    $('#graficoTipos').html('Sem registros, por favor modifique a busca!');
                } else {
                    var processed_json = [];

                    var value = 0;
                    for (i = 0; i < result.length; i++) {
                        var key = result[i].key;

                        if (i >= 15) {
                            //var key = "OUTROS";
                            //value += result[i].value;
                            //processed_json.push([key, key, value]);
                        }
                        else
                            //if (pagAtual == 'Quantidade de ofertas')
                                processed_json.push([result[i].key, result[i].key, result[i].value]);
                            //else
                            //    processed_json.push([result[i].key, result[i].key + " - R$" + result[i].value.toLocaleString('pt-BR'), result[i].value]);
                    }


                    var dadosPivot = getPivotArray(processed_json, 0, 1, 2);

                    var categories = dadosPivot;
                    categories[0].shift();

                    var dadosGrafico = [];

                    for (i = 1; i < dadosPivot.length; i++) {

                        dadosGrafico.push({
                            name: dadosPivot[i].shift(),
                            data: dadosPivot[i]
                        });
                    }

                    CarregarGrafico("graficoTipos", categories[0], dadosGrafico, "Tipo de imóvel", "bar", "6");
                }
            },
            error: function (err) {
            }
        });
    }

    function CarregarGraficoGaragens() {
        $('.modal-loading-local').show();
        $('#graficoGaragens').hide();
        var processed_json = new Array();

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "/Home/GetGaragens",
            data: JSON.stringify({ cidades, bairros, tipos, tipoimovel, DtReferencia: dtRefencia, Unidade: unidade, TipoArea: tipoArea }),

            dataType: "json",
            success: function (result) {
                $('.modal-loading-local').hide();
                $('#graficoGaragens').show();
                if (result.length == 0) {
                    $('#graficoGaragens').html('Sem registros, por favor modifique a busca!');
                } else {
                    CarregarGraficoPizza("graficoGaragens", "Garagens", result);
                }
            },
            error: function (err) {
            }
        });
    }

    function CarregarGrafico(id, categories, dadosGrafico, titulo, tipo, colmd) {

    //if (unidade == "quantidade") {
        Highcharts.chart(id, {
            chart: {
                type: tipo,
                height: 800
            },
            title: {
                text: titulo
            },
            legend: {
                itemStyle: {
                    fontSize: '10px'
                },
                enabled: false
            },
            //yAxis: {
            //    title: {
            //        text: ''
            //    }
            //},
            //yAxis: {
            //   // min: 10,
            //    startOnTick: false
            //},
            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true,
                        formatter: function (e) {
                            if (unidade != "quantidade") {
                                return 'R$ ' + Highcharts.numberFormat(this.y,2);
                            } else {
                                return this.y;
                            }


                        }
                    }
                },
                series: {
                    pointWidth: 35
                }
            },

            //xAxis: {
            //    categories: categories
            //},
            series: dadosGrafico
        });
        Highcharts.setOptions({

            lang: {
                decimalPoint: ',',
                thousandsSep: '.'
            }
        });
    }

    function CarregarGraficoEvolutivo(id, categories, dadosGrafico, titulo, tipo, colmd) {


        Highcharts.chart(id, {
            chart: {
                type: tipo,
                height: 400
            },
            title: {
                text: titulo
            },
            legend: {
                itemStyle: {
                    fontSize: '10px'
                },
                enabled: false
            },
            yAxis: {
                title: {
                    text: ''
                }
            },
            //yAxis: {
            //   // min: 10,
            //    startOnTick: false
            //},
            plotOptions: {
                series: {
                    pointWidth: 35
                }
            },

            xAxis: {
                categories: categories
            },
            series: dadosGrafico
        });
    }


    function CarregarGraficoPizza(id, titulo, dados) {



        var dadosProcessados = [];

        $.each(dados, function (i, obj) {
            var agregador = { name: obj.key, y: obj.value }

            var resultObject = search(obj.key, dadosProcessados);

            if (!resultObject) {
                dadosProcessados.push(agregador)
            }
            else {
                resultObject.y += (obj.value)
            }

        })

        Highcharts.chart(id, {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false,
                type: 'pie',
                height: 800
            },
            title: {
                text: titulo
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b>: {point.percentage:.1f} %'
                    }
                }
            },
            series: [{
                name: '',
                colorByPoint: true,
                data: dadosProcessados
            }]
        });
    }


    function getPivotArray(dataArray, rowIndex, colIndex, dataIndex) {
        //Code from https://techbrij.com
        var result = {}, ret = [];
        var newCols = [];
        for (var i = 0; i < dataArray.length; i++) {

            if (!result[dataArray[i][rowIndex]]) {
                result[dataArray[i][rowIndex]] = {};
            }
            result[dataArray[i][rowIndex]][dataArray[i][colIndex]] = dataArray[i][dataIndex];

            //To get column names
            if (newCols.indexOf(dataArray[i][colIndex]) == -1) {
                newCols.push(dataArray[i][colIndex]);
            }
        }

        // newCols.sort();
        var item = [];

        //Add Header Row
        item.push('Item');
        item.push.apply(item, newCols);
        ret.push(item);

        //Add content
        for (var key in result) {
            item = [];
            item.push(key);
            for (var i = 0; i < newCols.length; i++) {
                
                item.push(result[key][newCols[i]] || 0);
            }
            ret.push(item);
        }
        return ret;
    }

    function search(nameKey, myArray) {
        for (var i = 0; i < myArray.length; i++) {
            if (myArray[i].name === nameKey) {
                return myArray[i];
            }
        }
    }
</script>
